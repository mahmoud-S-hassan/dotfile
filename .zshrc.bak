# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi
#
# Oh-my-zsh installation path
ZSH=/usr/share/oh-my-zsh/

# Powerlevel10k theme path
source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme

# List of plugins used
plugins=(git archlinux zsh-syntax-highlighting zsh-autosuggestions fzf-tab)
source $ZSH/oh-my-zsh.sh

# In case a command is not found, try to find the package that has it
function command_not_found_handler {
    local purple='\e[1;35m' bright='\e[0;1m' green='\e[1;32m' reset='\e[0m'
    printf 'zsh: command not found: %s\n' "$1"
    local entries=( ${(f)"$(/usr/bin/pacman -F --machinereadable -- "/usr/bin/$1")"} )
    if (( ${#entries[@]} )) ; then
        printf "${bright}$1${reset} may be found in the following packages:\n"
        local pkg
        for entry in "${entries[@]}" ; do
            local fields=( ${(0)entry} )
            if [[ "$pkg" != "${fields[2]}" ]]; then
                printf "${purple}%s/${bright}%s ${green}%s${reset}\n" "${fields[1]}" "${fields[2]}" "${fields[3]}"
            fi
            printf '    /%s\n' "${fields[4]}"
            pkg="${fields[2]}"
        done
    fi
    return 127
}

# Detect AUR wrapper
if pacman -Qi yay &>/dev/null; then
   aurhelper="yay"
elif pacman -Qi paru &>/dev/null; then
   aurhelper="paru"
fi

function in {
    local -a inPkg=("$@")
    local -a arch=()
    local -a aur=()

    for pkg in "${inPkg[@]}"; do
        if pacman -Si "${pkg}" &>/dev/null; then
            arch+=("${pkg}")
        else
            aur+=("${pkg}")
        fi
    done

    if [[ ${#arch[@]} -gt 0 ]]; then
        sudo pacman -S "${arch[@]}"
    fi

    if [[ ${#aur[@]} -gt 0 ]]; then
        ${aurhelper} -S "${aur[@]}"
    fi
}

# Helpful aliases
alias c='clear' # clear terminal
alias l='eza -lh --icons=auto' # long list
alias ls='eza -1 --icons=auto' # short list
alias ll='eza -lha --icons=auto --sort=name --group-directories-first' # long list all
alias ld='eza -lhD --icons=auto' # long list dirs
alias lt='eza --icons=auto --tree' # list folder as tree
alias un='$aurhelper -Rns' # uninstall package
alias up='$aurhelper -Syu' # update system/package/aur
alias pl='$aurhelper -Qs' # list installed package
alias pa='$aurhelper -Ss' # list available package
alias pc='$aurhelper -Sc' # remove unused cache
alias po='$aurhelper -Qtdq | $aurhelper -Rns -' # remove unused packages, also try > $aurhelper -Qqd | $aurhelper -Rsu --print -
alias vc='code' # gui code editor

# Directory navigation shortcuts
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# Always mkdir a path (this doesn't inhibit functionality to make a single dir)
alias mkdir='mkdir -p'

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Display Pokemon
pokemon-colorscripts --no-title -r 1,3,6






alias cl=clear
alias c=clear
alias e=exit
alias v=nvim

#alias for nvims with fzf
alias va=nvim-astro
alias vl=nvim-lazy
alias vd=nvim-DEVASLIFE

alias nvim-lazy="NVIM_APPNAME=LazyVim nvim"
alias nvim-kick="NVIM_APPNAME=kickstart nvim"
alias nvim-chad="NVIM_APPNAME=NvChad nvim"
alias nvim-astro="NVIM_APPNAME=AstroNvim nvim"
alias nvim-DEVASLIFE="NVIM_APPNAME=DEVASLIFE nvim"
alias nvim-Grim="NVIM_APPNAME=nvimGrim nvim"
alias nvim-gg="NVIM_APPNAME=nvimgg nvim"

function nvims() {
    items=("default" "kickstart" "DEVASLIFE" "LazyVim" "NvChad" "AstroNvim" "nvimGrim" "nvimgg")
    config=$(printf "%s\n" "${items[@]}" | fzf --prompt="î˜« Neovim Config ï˜½ " --height=~50% --layout=reverse --border --exit-0)
    if [[ -z $config ]]; then
        echo "Nothing selected"
        return 0
    elif [[ $config == "default" ]]; then
        config=""
    fi
    NVIM_APPNAME=$config nvim $@
}

bindkey -s ^a "nvims\n"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh



gcop() {
    git log \
        --reverse \
        --color=always \
        --format="%C(cyan)%h %C(blue)%ar%C(auto)%d \
        %C(yellow)%s%+b %C(black)%ae" "$@" |
    fzf -i -e +s \
        --reverse \
        --tiebreak=index \
        --no-multi \
        --ansi \
        --preview="echo {} | grep -o '[a-f0-9]\{7\}' | head -1 | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'" \
        --header "enter: view, C-c: copy hash" \
        --bind "enter:execute:_viewGitLogLine {} | less -R" \
        --bind "ctrl-c:execute:_gitLogLineToHash {} | xclip -r -selection clipboard"
}

_viewGitLogLine() {
    local commit_hash="$1"
    git show --color=always "$commit_hash" | less -r
}

_gitLogLineToHash() {
    local commit_line="$1"
    local commit_hash=$(echo "$commit_line" | grep -o '[a-f0-9]\{7\}' | head -1)
    echo "$commit_hash" | xclip -r -selection clipboard
}

#-----------------------------------------------------------------------------#
# Function to handle directory changes using fzf
function _fzf_change_directory {
    local foo
    foo=$(printf "%s\n" "${directories[@]}" | fzf --prompt="ðŸ—‚ Select Directory â†’ " --height=50% --layout=reverse --border --exit-0)
    if [ "$foo" ]; then
        builtin cd "$foo"
    fi
}

# Main function to list and navigate directories using fzf
function fzf_change_directory {
    local directories
    directories=($(echo "$HOME/.config"
        # Check if ghq root exists or remove this line if not needed
        [ -d "$(ghq root)" ] && find "$(ghq root)" -maxdepth 4 -type d -name .git | sed 's/\/\.git//'
        ls -ad */ | perl -pe "s#^#$PWD/#" | grep -v \.git
        # Check if Developments exists and contains directories
        if [ -d "$HOME/Developments" ]; then
            ls -ad $HOME/Developments/*/* | grep -v \.git
        fi
    ))

    if [ ${#directories[@]} -eq 0 ]; then
        echo "No directories found!"
        return
    fi

    _fzf_change_directory
}

## Function to handle directory changes using fzf
#function _fzf_change_directory {
#    local foo
#    foo=$(fzf | perl -pe 's/([ ()])/\\\\$1/g')
#
#    if [ "$foo" ]; then
#        builtin cd "$foo"
#    fi
#}
#
## Main function to list and navigate directories using fzf
#function fzf_change_directory {
#    local directories
#    directories=$(echo "$HOME/.config"
#        # Check if ghq root exists or remove this line if not needed
#        [ -d "$(ghq root)" ] && find "$(ghq root)" -maxdepth 4 -type d -name .git | sed 's/\/\.git//'
#        ls -ad */ | perl -pe "s#^#$PWD/#" | grep -v \.git
#        # Check if Developments exists and contains directories
#        if [ -d "$HOME/Developments" ]; then
#            ls -ad $HOME/Developments/*/* | grep -v \.git
#        fi
#    )
#
#    if [ -z "$directories" ]; then
#        echo "No directories found!"
#        return
#    fi
#
#    echo "$directories" | sed -e 's/\/$//' | awk '!a[$0]++' | _fzf_change_directory "$@"
#}
#


## Function to handle directory changes using fzf
#function _fzf_change_directory {
#    local foo
#    foo=$(fzf | perl -pe 's/([ ()])/\\\\$1/g')
#
#    if [ "$foo" ]; then
#        builtin cd "$foo"
#        commandline -r ''
#        commandline -f repaint
#    else
#        commandline ''
#    fi
#}
#
## Main function to list and navigate directories using fzf
#function fzf_change_directory {
#    local directories
#    directories=$(echo "$HOME/.config"
#        find "$(ghq root)" -maxdepth 4 -type d -name .git | sed 's/\/\.git//'
#        ls -ad */ | perl -pe "s#^#$PWD/#" | grep -v \.git
#        ls -ad $HOME/Developments/*/* | grep -v \.git
#    )
#
#    echo "$directories" | sed -e 's/\/$//' | awk '!a[$0]++' | _fzf_change_directory "$@"
#}


#alias t='tmux attach || tmux new-session\; new-window\; new-window'

# Some tmux-related shell aliases

# Attaches tmux to the last session; creates a new session if none exists.
alias t='tmux attach || tmux new-session'

# Attaches tmux to a session (example: ta portal)
alias ta='tmux attach -t'

# Creates a new session
alias tn='tmux new-session'

# Lists all ongoing sessions
alias tl='tmux list-sessions'
# tmux new-window
alias tw='tmux neww'
#open a photo for now until I know more
alias o='xdg-open'

alias dr='dotnet run'
alias fz="find . -type f | fzf --preview 'bat --style=numbers --color=always -- {}'"
#path for typeScript
export PATH=~/.npm-global/bin:$PATH

export PATH="$PATH:$HOME/.dotnet"

# WSL 2 specific settings.
#export DISPLAY="$(/sbin/ip route | awk '/default/ { print $3 }'):0"

#lunch whatsapp 
alias whatsapp="/home/abo-salah/automated_scripts/WhatsAppWeb-linux-x64/WhatsAppWeb"




## [Completion]
## Completion scripts setup. Remove the following line to uninstall
[[ -f /home/abo-salah/.dart-cli-completion/zsh-config.zsh ]] && . /home/abo-salah/.dart-cli-completion/zsh-config.zsh || true
## [/Completion]


zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup

# Completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'

# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
# NOTE: don't use escape sequences (like '%F{red}%d%f') here, fzf-tab will ignore them
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no
# preview directory's content with eza when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
# custom fzf flags
# NOTE: fzf-tab does not follow FZF_DEFAULT_OPTS by default
zstyle ':fzf-tab:*' fzf-flags --color=fg:1,fg+:2 --bind=tab:accept
# To make fzf-tab follow FZF_DEFAULT_OPTS.
# NOTE: This may lead to unexpected behavior since some flags break this plugin. See Aloxaf/fzf-tab#455.
zstyle ':fzf-tab:*' use-fzf-default-opts yes
# switch group using `<` and `>`
zstyle ':fzf-tab:*' switch-group '<' '>'
# Shell integrations
eval "$(fzf --zsh)"
eval "$(zoxide init zsh)"

